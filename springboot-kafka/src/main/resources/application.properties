spring.application.name=springboot-kafka
management.endpoints.jmx.exposure.include=*
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
# spring cloud access&secret config
# 应用服务 WEB 访问端口
server.port=8080
# Actuator Web 访问端口
management.server.port=8081


##============== kafka ===================
##指定kafka 代理地址，可以多个
#spring.kafka.bootstrap-servers=localhost:9092
###=============== provider  =======================
#spring.kafka.producer.retries=0
## 每次批量发送消息的数量
#spring.kafka.producer.batch-size=16384
#spring.kafka.producer.buffer-memory=33554432
##procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
##acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
##acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
##acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
##可以设置的值为：all, -1, 0, 1
## from: https://www.cnblogs.com/linjiqin/p/11950758.html
#spring.kafka.producer.acks=1
#
### 指定消息key和消息体的编解码方式
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
###=============== consumer  =======================# 指定默认消费者group id
#spring.kafka.consumer.group-id=test-consumer-group
##实时生产，实时消费，不会从头开始消费
##earliest
##当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
##latest (生产使用)
##当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
##none
## topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
#spring.kafka.consumer.auto-offset-reset=earliest
#spring.jms.listener.concurrency=5
#spring.kafka.consumer.enable-auto-commit=true
#spring.kafka.consumer.auto-commit-interval=100
### 指定消息key和消息体的编解码方式
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

## session

##kafka配置
### kafka producer ###
kafka.producer.config.bootstrap-servers=172.16.0.89:9092
kafka.producer.config.retries=0
kafka.producer.config.ack=1
kafka.producer.config.max-block-ms=6000
kafka.producer.config.batch-size=4096
kafka.producer.config.linger-ms=1
kafka.producer.config.buffer-memory=40960
kafka.producer.config.max-request-size=1048576
kafka.producer.config.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
kafka.producer.config.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
kafka.producer.config.compression_type=none
### kafka consumer ###
kafka.consumer.config.enable-auto-commit=true
kafka.consumer.auto-commit-interval-ms=300
kafka.consumer.session-timeout-ms=15000
kafka.consumer.config.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
kafka.consumer.config.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
kafka.consumer.config.auto-offset-reset=earliest
kafka.consumer.config.heartbeat-interval=600
kafka.consumer.config.concurrency-thread=3
kafka.consumer.config.polling-timeout=600

### custom configuration
kafka.topic.name=test
kafka.consumer.group-id=group-1